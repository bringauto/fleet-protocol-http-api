# coding: utf-8

"""
    Fleet v2 HTTP API

    Development version of a the API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint, constr, validator

class DeviceId(BaseModel):
    """
    The Id of a device.  # noqa: E501
    """
    module_id: Optional[conint(strict=True, ge=0)] = Field(None, description="A general integer Id")
    type: Optional[conint(strict=True, ge=0)] = None
    role: Optional[constr(strict=True)] = None
    name: Optional[StrictStr] = None
    __properties = ["module_id", "type", "role", "name"]

    @validator('role')
    def role_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9_]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeviceId:
        """Create an instance of DeviceId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeviceId:
        """Create an instance of DeviceId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeviceId.parse_obj(obj)

        _obj = DeviceId.parse_obj({
            "module_id": obj.get("module_id"),
            "type": obj.get("type"),
            "role": obj.get("role"),
            "name": obj.get("name")
        })
        return _obj


