openapi: 3.0.2


info:
  title: Fleet v2 HTTP API
  version: 0.1.0
  description: Development version of a the API


servers:
  - url: http://localhost

tags: 
- name: car
- name: device
- name: module


paths:
  /cars:
    get:
      x-openapi-router-controller: fleetv2_http_api.impl.device_controller
      operationId: available_cars
      description: 
        "Return list of available cars for all companies registered in the database.<br>
        Each item list has the format: '&lt;company name&gt;_&lt;car name&gt;'."
      tags: 
        - car
      responses:
        '200':
          description: A list of available cars. 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  pattern: "^[a-z0-9_]+$"
              example:
                ['company_x_basic_car', 'company_x_better_car', "competing_company_even_better_car"]
        '500':
          description: Cannot display avaialble cars due to internal server error.

  /{company_name}/{car_name}/available-devices:
    get:
      x-openapi-router-controller: fleetv2_http_api.impl.device_controller
      operationId: available-devices
      description: 
        Return device Ids for all devices available for contained in the specified car.<br>
        For a single car module, the device Ids are returned as an object containing module Id and the list of device Ids. <br>

        If a module Id is specified, only a single such object is returned. <br>
        Otherwise, a list of such objects is returned, one for each module contained in the car. <br>
      tags: 
        - device
      responses:
        '200':
          description: A list of available devices. 
          content:
            application/json:
              schema:
                oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/Module'
                - $ref: '#/components/schemas/Module'
                
        '404':
          description: Cannot display available devices. Either company, car or module specified in the request does not exist.
        '500':
          description: Cannot display available devices due to internal server error.
      
      parameters:
      - $ref: '#/components/parameters/CompanyName'
      - $ref: '#/components/parameters/CarName'
      - $ref: "#/components/parameters/ModuleId"


  /{company_name}/{car_name}/status/{sdevice_id}:
    get:
      x-openapi-router-controller: fleetv2_http_api.impl.device_controller
      operationId: list_statuses
      description: It returns list of the Device Statuses.
      tags: 
      - module
      responses:
        '200':
          description: A list of device statuses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
              example:
                [
                  {
                    "timestamp": 1700139157, 
                    device_id: {module_id: 47, type: 2, role: test_device, name: Test Device},
                    payload: {payload_type: 0, encoding: 1, data: V2FpdGluZw==}
                  },
                  {
                    "timestamp": 1700145485, 
                    device_id: {module_id: 47, type: 2, role: test_device, name: Test Device},
                    payload: {payload_type: 0, encoding: 1, data: U3RpbGwgd29ya2luZw==}
                  },
                  {
                    "timestamp": 1700145490, 
                    device_id: {module_id: 47, type: 2, role: test_device, name: Test Device},
                    payload: {payload_type: 0, encoding: 0, data: {"description": "Still working"}}
                  },
                ]
        '500':
          description: The statuses cannot be displayed due to internal server error.
    
      parameters:
        - $ref: '#/components/parameters/All'
        - $ref: '#/components/parameters/Since'

    parameters:
      - $ref: '#/components/parameters/CompanyName'
      - $ref: '#/components/parameters/CarName'
      - $ref: '#/components/parameters/SerializedDeviceId'


    post:
      x-openapi-router-controller: fleetv2_http_api.impl.device_controller
      operationId: send_statuses
      description: Add statuses received from the Device.
      tags: 
      - device
      responses:
        '200':
          description: The statuses have been sent.
        '500':
          description: The statuses could not been sent due to internal server error.
      requestBody:
        description: Statuses to be send by the device.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Message'
            example:
              [
                {
                  timestamp: 1700139157, 
                  device_id: {module_id: 47, type: 2, role: test_device, name: Test Device},
                  payload: {payload_type: 0, encoding: 1, data: QnJpbmdBdXRv}
                },
                {
                  timestamp: 1700145485, 
                  device_id: {module_id: 47, type: 2, role: test_device, name: Test Device},
                  payload: {payload_type: 0, encoding: 1, data: U3RhcnQgd29ya2luZw==}
                },
                {
                  timestamp: 1700145490, 
                  device_id: {module_id: 47, type: 2, role: test_device, name: Test Device},
                  payload: {payload_type: 0, encoding: 0, data: {"description": "Just keep working"}}
                },
              ]


  /{company_name}/{car_name}/command/{sdevice_id}:
    get:
      x-openapi-router-controller: fleetv2_http_api.impl.device_controller
      operationId: list_commands
      description: Returns list of the Device Commands. 
      tags: 
      - device
      responses:
        '200':
          description: A list of commands.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
              example:
                [
                  {
                    "timestamp": 1700139157, 
                    device_id: {module_id: 47, type: 2, role: test_device, name: Test Device},
                    payload: {payload_type: 1, encoding: 1, data: U2F5IGhlbGxv}
                  },
                ]
      
        '500':
          description: The commands cannot be displayed due to internal server error.

      parameters:
        - $ref: '#/components/parameters/All'
        - $ref: '#/components/parameters/Since'

    parameters:
      - $ref: '#/components/parameters/CompanyName'
      - $ref: '#/components/parameters/CarName'
      - $ref: '#/components/parameters/SerializedDeviceId'

    post:
      x-openapi-router-controller: fleetv2_http_api.impl.device_controller
      operationId: send_commands
      description: It adds new device Commands.
      tags: 
      - device
      requestBody:
        description: Commands to be executed by the device.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Message'
            example:
              [
                {
                  timestamp: 1700139157, 
                  device_id: {module_id: 47, type: 2, role: test_device, name: Test Device},
                  payload: {payload_type: 1, encoding: 1, data: U2F5IGhlbGxv}
                },
              ]

      responses:
        '200':
          description: The commands have been sent.
        '500':
          description: The commands have not been sent due to internal server error.


components:
  parameters:
    All: 
      name: all_available
      description: If set, the method returns a complete history of statuses/commands.
      in: query
      allowEmptyValue: true
      schema: 
        type: string
        nullable: true
      example: 

    Since:
      name: since
      description: A Unix timestamp; if specified, the method returns all device statuses inclusivelly older than value of specified timestamp.
      in: query
      allowEmptyValue: false 
      schema: 
        type: integer
        nullable: true
      example: 1699262836

    Until:
      name: since
      description: A Unix timestamp; if specified, the method returns all device commands inclusivelly newer than value of specified timestamp.
      in: query
      allowEmptyValue: false 
      schema: 
        type: integer
        nullable: true
      example: 1699262836

    ModuleId:
      name: module_id
      description: An Id of module, an unsigned integer.
      in: query
      allowEmptyValue: false 
      schema: 
        type: integer
        minimum: 0
        nullable: true
      example: 47

    SerializedDeviceId:
      name: sdevice_id
      description: The Id of the Device, described with an object.
      in: path
      required: true
      schema:
        type: string
        pattern: "^[0-9]+_[0-9]+_[a-z0-9_]+$"
      example: 47_2_test_device

    CarName: 
      name: car_name 
      description: Name of the Car, following a pattern '^[0-9a-z_]+$'.
      in: path 
      required: true 
      schema: 
        type: string
        pattern: "^[0-9a-z_]+$"
      example: test_car

    CompanyName: 
      name: company_name
      description: Name of the company, following a pattern '^[0-9a-z_]+$'.
      in: path 
      required: true 
      schema: 
        type: string
        pattern: "^[0-9a-z_]+$"
      example: test_company
  

  schemas:
    Message: 
      description: Physical device or program located on the car.
      type: object 
      properties: 
        timestamp: 
          description: Unix timestamp of the message in milliseconds.
          type: integer 
          example: 1699262836
        device_id: 
          $ref: '#/components/schemas/DeviceId'
        payload:
          $ref: '#/components/schemas/Payload'

    Module: 
      description: A module containing at least one device (specified by device Id).
      type: object 
      properties:
        module_id: 
          description: Id (unsigned integer) of the module.
          type: integer
          minimum: 0
          example: 47
        device_list:
          description: List of Ids of devices contained in the module.
          type: array
          items:
            $ref: '#/components/schemas/DeviceId'
          example: 
            [
              {module_id: 47, device_type: 2, device_role: test_device, device_name: Test Device},
              {module_id: 47, device_type: 2, device_role: test_device, device_name: Test Device},
            ]

    DeviceId: 
      description: Id of the device described with an object.
      type: object
      properties:
        module_id: 
          description: Id (unsigned integer) of the module containing the device.
          type: integer
          minimum: 0
        type:
          description: Unsigned integer.
          type: integer
          minimum: 0
        role:
          description: "String description of the device role. It follows pattern '^[a-z0-9_]+$'."
          type: string
          format: utf-8
          pattern: '^[a-z0-9_]+$'
        name: 
          description: UTF-8 encoded string.
          type: string
          format: utf-8
      example:
        module_id: 47
        type: 2
        role: test_device
        name: Test Device
          
    Payload: 
      type: object
      description: Payload of the message, containing message type (status or command), encoding and data.
      properties:
        type: 
          description: 'Type of the payload, enumerated as follows: <br>
            0 - STATUS <br>
            1 - COMMAND'
          type: integer 
        encoding:
          description: 'Encoding of the payload, enumerated as follows: <br>
            0 - JSON <br>
            1 - BASE64'
          type: integer
        data:
          description: 'Payload data in JSON or BASE64 format, depending on the encoding.'
          oneOf:
            - type: object
              
            - type: string
              format: base64
      example:
        type: 0
        encoding: 1
        data: QnJpbmdBdXRv


# Cleaning up the statuses/commands:
#
# - every command and status has a TIMESTAMP and a KEY denoting a device, 
#   to/by which the command/status was sent
#
# - on a regular basis (e.g., every minute), a part of commands/statuses is deleted, 
#   if their timestamp is less or equal to current timestamp minus some specified period (e.g., 1 hour)
#
# - the method for posting new commands automatically detects, if a device key assigned 
#   to this new command also correspond to at least on status in the database. 
#   If not, the command is rejected
#
# - it is possible, that some commands remain in the database, whose device key does not now belong 
#   to any status
#
# - if after N minutes a new status is posted with the device key assigned, that was once assigned 
#   to other status (now deleted) in the database, all the commands having the same device key assigned
#   have to be deleted from the database. If the timestamp of such a command is GREATER, a warning 
#   should be raised/logged (it is an invalid timestamp value, because, as mentioned previously, 
#   no command could have been added after deleting the last status with the given device key)


