openapi: 3.0.2


info:
  title: Fleet v2 HTTP API
  version: 0.1.0
  description: Development version of a the API


servers:
  - url: http://localhost:8080

tags: 
- name: car
- name: device
- name: database


paths:
  /cars:
    get:
      x-openapi-router-controller: fleetv2_http_api.impl.car_controller
      operationId: available_cars
      description: It returns the list of available Cars.
      tags: 
        - car
      responses:
        '200':
          description: A list of available cars. 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
              example:
                [{company_name: 'bringauto', car_name: 'piba0258'}]
        '500':
          description: Cannot display avaialble cars due to internal server error.

  /{company_name}/{car_name}/available-devices:
    get:
      x-openapi-router-controller: fleetv2_http_api.impl.device_controller
      operationId: available_devices
      description: Returns list of available devices for the whole car or a single module.
      tags: 
        - device
      responses:
        '200':
          description: A list of available devices. 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceId'
        '500':
          description: Cannot display available devices due to internal server error.
      
      parameters:
        - $ref: "#/components/parameters/ModuleId"

    post: 
      deprecated: true
      x-openapi-router-controller: fleetv2_http_api.impl.device_controller
      operationId: add_device
      description: Add a new device
      tags: 
        - device
      responses:
        '200':
          description: New device added
        '500':
          description: Cannot add device due to internal server error.
      requestBody:
        description: New device
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceId'

    parameters:
      - $ref: '#/components/parameters/CompanyName'
      - $ref: '#/components/parameters/CarName'


  /{company_name}/{car_name}/status/{device-id}:
    get:
      x-openapi-router-controller: fleetv2_http_api.impl.device_controller
      operationId: list_statuses
      description: It returns list of the Device Statuses.
      tags: 
      - device
      responses:
        '200':
          description: A list of device statuses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payload'
        '500':
          description: The statuses cannot be displayed due to internal server error.
    
      parameters:
        - $ref: '#/components/parameters/All'
        - $ref: '#/components/parameters/Since'

    parameters:
      - $ref: '#/components/parameters/CompanyName'
      - $ref: '#/components/parameters/CarName'
      - $ref: '#/components/parameters/DeviceId'


    post:
      x-openapi-router-controller: fleetv2_http_api.impl.device_controller
      operationId: send_statuses
      description: Add statuses received from the Device.
      tags: 
      - device
      responses:
        '200':
          description: The statuses have been sent.
        '500':
          description: The statuses could not been sent due to internal server error.
      requestBody:
        description: Statuses to be send by the device.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Payload'


  /{company_name}/{car_name}/command/{device-id}:
    get:
      x-openapi-router-controller: fleetv2_http_api.impl.device_controller
      operationId: list_commands
      description: Returns list of the Device Commands.
      tags: 
      - device
      responses:
        '200':
          description: A list of commands.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payload'
      
        '500':
          description: The commands cannot be displayed due to internal server error.

      parameters:
        - $ref: '#/components/parameters/All'
        - $ref: '#/components/parameters/Since'

    parameters:
      - $ref: '#/components/parameters/CompanyName'
      - $ref: '#/components/parameters/CarName'
      - $ref: '#/components/parameters/DeviceId'

    post:
      x-openapi-router-controller: fleetv2_http_api.impl.device_controller
      operationId: send_commands
      description: It adds new device Commands.
      tags: 
      - device
      requestBody:
        description: Commands to be executed by the device.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Payload'
      responses:
        '200':
          description: The commands have been sent.
        '500':
          description: The commands have not been sent due to internal server error.


components:
  parameters:
    All: 
      name: all 
      description: If set, the method returns a complete history of statuses/commands.
      in: query
      allowEmptyValue: true
      schema: 
        type: boolean
      example: false

    Since:
      name: since
      description: A Unix timestamp; if specified, the method returns all device statuses/commands inclusivelly older than value of specified timestamp.
      in: query
      allowEmptyValue: false 
      schema: 
        type: integer
      example: 1699262836

    ModuleId:
      name: module-id
      description: An Id of module.
      in: query
      allowEmptyValue: true
      schema: 
        minimum: 0
      example: 785

    DeviceId:
      name: device-id
      description: The Id of the Device. 
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/DeviceId'
      example: 
        module_id: 42
        type: 8
        role: device_role
        name: 'Device Name'


    CarName: 
      name: car_name 
      description: Name of the Car 
      in: path 
      required: true 
      schema: 
        type: string
        pattern: "^[0-9a-z_]+$"
        example: auto_123

    CompanyName: 
      name: company_name
      description: Name of the company
      in: path 
      required: true 
      schema: 
        type: string
        pattern: "^[0-9a-z_]+$"
        example: company_xyz
  

  schemas:
    Car:
      description: The subject of control.
      type: object
      required:
        - company_name
        - car_name
      properties:
        company_name:
          type: string
          example: "bringauto"
          pattern: '^[a-z0-9_]+$'
        car_name:
          type: string
          example: piba09223
          pattern: '^[a-z0-9_]+$'

    Module:
      description: Car module, representing set of Device 
      type: object 
      required: 
      - id
      - device-list
      properties: 
        id: 
          $ref: '#/components/schemas/Id'
        device-list:
          type: array
          items: 
            $ref: '#/components/schemas/DeviceId'

    Message: 
      description: Physical device or program located on the car.
      type: object 
      properties: 
        timestamp: 
          type: integer 
          example: 1699262836
        id: 
          $ref: '#/components/schemas/DeviceId'
        payload:
          $ref: '#/components/schemas/Payload'

    DeviceId: 
      description: The Id of a device. 
      type: object
      properties:
        module_id: 
          $ref: '#/components/schemas/Id'
        type:
          type: integer
          minimum: 0
          example: 4
        role:
          type: string
          example: "warning_led"
          pattern: '^[a-z0-9_]+$'
        name: 
          type: string
          example: "Left red LED"
          
    Payload: 
      description: A message passed to device (command) or by device (status).
      type: object
      properties:
        type: 
          type: integer 
          minimum: 0
          example: 4
        encoding:
          type: string
          example: BASE64
        data:
          type: object
          example: 
            main_text: The device is running.      

    Id: 
      description: A general integer Id
      type: integer 
      minimum: 0 
      example: 42


# Cleaning up the statuses/commands:
#
# - every command and status has a TIMESTAMP and a KEY denoting a device, 
#   to/by which the command/status was sent
#
# - on a regular basis (e.g., every minute), a part of commands/statuses is deleted, 
#   if their timestamp is less or equal to current timestamp minus some specified period (e.g., 1 hour)
#
# - the method for posting new commands automatically detects, if a device key assigned 
#   to this new command also correspond to at least on status in the database. 
#   If not, the command is rejected
#
# - it is possible, that some commands remain in the database, whose device key does not now belong 
#   to any status
#
# - if after N minutes a new status is posted with the device key assigned, that was once assigned 
#   to other status (now deleted) in the database, all the commands having the same device key assigned
#   have to be deleted from the database. If the timestamp of such a command is GREATER, a warning 
#   should be raised/logged (it is an invalid timestamp value, because, as mentioned previously, 
#   no command could have been added after deleting the last status with the given device key)


