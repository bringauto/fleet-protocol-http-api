from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fleetv2_http_api.models.base_model import Model
from fleetv2_http_api import util


class ConnectToDatabaseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dialect=None, dbapi=None, location=None, username=None, password=None):  # noqa: E501
        """ConnectToDatabaseRequest - a model defined in OpenAPI

        :param dialect: The dialect of this ConnectToDatabaseRequest.  # noqa: E501
        :type dialect: str
        :param dbapi: The dbapi of this ConnectToDatabaseRequest.  # noqa: E501
        :type dbapi: str
        :param location: The location of this ConnectToDatabaseRequest.  # noqa: E501
        :type location: str
        :param username: The username of this ConnectToDatabaseRequest.  # noqa: E501
        :type username: str
        :param password: The password of this ConnectToDatabaseRequest.  # noqa: E501
        :type password: str
        """
        self.openapi_types = {
            'dialect': str,
            'dbapi': str,
            'location': str,
            'username': str,
            'password': str
        }

        self.attribute_map = {
            'dialect': 'dialect',
            'dbapi': 'dbapi',
            'location': 'location',
            'username': 'username',
            'password': 'password'
        }

        self._dialect = dialect
        self._dbapi = dbapi
        self._location = location
        self._username = username
        self._password = password

    @classmethod
    def from_dict(cls, dikt) -> 'ConnectToDatabaseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The connect_to_database_request of this ConnectToDatabaseRequest.  # noqa: E501
        :rtype: ConnectToDatabaseRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dialect(self) -> str:
        """Gets the dialect of this ConnectToDatabaseRequest.


        :return: The dialect of this ConnectToDatabaseRequest.
        :rtype: str
        """
        return self._dialect

    @dialect.setter
    def dialect(self, dialect: str):
        """Sets the dialect of this ConnectToDatabaseRequest.


        :param dialect: The dialect of this ConnectToDatabaseRequest.
        :type dialect: str
        """

        self._dialect = dialect

    @property
    def dbapi(self) -> str:
        """Gets the dbapi of this ConnectToDatabaseRequest.


        :return: The dbapi of this ConnectToDatabaseRequest.
        :rtype: str
        """
        return self._dbapi

    @dbapi.setter
    def dbapi(self, dbapi: str):
        """Sets the dbapi of this ConnectToDatabaseRequest.


        :param dbapi: The dbapi of this ConnectToDatabaseRequest.
        :type dbapi: str
        """

        self._dbapi = dbapi

    @property
    def location(self) -> str:
        """Gets the location of this ConnectToDatabaseRequest.


        :return: The location of this ConnectToDatabaseRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this ConnectToDatabaseRequest.


        :param location: The location of this ConnectToDatabaseRequest.
        :type location: str
        """

        self._location = location

    @property
    def username(self) -> str:
        """Gets the username of this ConnectToDatabaseRequest.


        :return: The username of this ConnectToDatabaseRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this ConnectToDatabaseRequest.


        :param username: The username of this ConnectToDatabaseRequest.
        :type username: str
        """

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this ConnectToDatabaseRequest.


        :return: The password of this ConnectToDatabaseRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this ConnectToDatabaseRequest.


        :param password: The password of this ConnectToDatabaseRequest.
        :type password: str
        """

        self._password = password
