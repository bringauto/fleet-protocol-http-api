from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fleetv2_http_api.models.base_model import Model
from fleetv2_http_api import util


class Token(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token=None, expires_in=None, not_before_policy=None, refresh_expires_in=None, refresh_token=None, scope=None, session_state=None, token_type=None):  # noqa: E501
        """Token - a model defined in OpenAPI

        :param access_token: The access_token of this Token.  # noqa: E501
        :type access_token: str
        :param expires_in: The expires_in of this Token.  # noqa: E501
        :type expires_in: int
        :param not_before_policy: The not_before_policy of this Token.  # noqa: E501
        :type not_before_policy: int
        :param refresh_expires_in: The refresh_expires_in of this Token.  # noqa: E501
        :type refresh_expires_in: int
        :param refresh_token: The refresh_token of this Token.  # noqa: E501
        :type refresh_token: str
        :param scope: The scope of this Token.  # noqa: E501
        :type scope: str
        :param session_state: The session_state of this Token.  # noqa: E501
        :type session_state: str
        :param token_type: The token_type of this Token.  # noqa: E501
        :type token_type: str
        """
        self.openapi_types = {
            'access_token': str,
            'expires_in': int,
            'not_before_policy': int,
            'refresh_expires_in': int,
            'refresh_token': str,
            'scope': str,
            'session_state': str,
            'token_type': str
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'expires_in': 'expires_in',
            'not_before_policy': 'not-before-policy',
            'refresh_expires_in': 'refresh_expires_in',
            'refresh_token': 'refresh_token',
            'scope': 'scope',
            'session_state': 'session_state',
            'token_type': 'token_type'
        }

        self._access_token = access_token
        self._expires_in = expires_in
        self._not_before_policy = not_before_policy
        self._refresh_expires_in = refresh_expires_in
        self._refresh_token = refresh_token
        self._scope = scope
        self._session_state = session_state
        self._token_type = token_type

    @classmethod
    def from_dict(cls, dikt) -> 'Token':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Token of this Token.  # noqa: E501
        :rtype: Token
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self) -> str:
        """Gets the access_token of this Token.

        Jwt token used for authorization.  # noqa: E501

        :return: The access_token of this Token.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token: str):
        """Sets the access_token of this Token.

        Jwt token used for authorization.  # noqa: E501

        :param access_token: The access_token of this Token.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def expires_in(self) -> int:
        """Gets the expires_in of this Token.

        Time in seconds until the token expires.  # noqa: E501

        :return: The expires_in of this Token.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in: int):
        """Sets the expires_in of this Token.

        Time in seconds until the token expires.  # noqa: E501

        :param expires_in: The expires_in of this Token.
        :type expires_in: int
        """

        self._expires_in = expires_in

    @property
    def not_before_policy(self) -> int:
        """Gets the not_before_policy of this Token.

        Time in seconds until the token can be used.  # noqa: E501

        :return: The not_before_policy of this Token.
        :rtype: int
        """
        return self._not_before_policy

    @not_before_policy.setter
    def not_before_policy(self, not_before_policy: int):
        """Sets the not_before_policy of this Token.

        Time in seconds until the token can be used.  # noqa: E501

        :param not_before_policy: The not_before_policy of this Token.
        :type not_before_policy: int
        """

        self._not_before_policy = not_before_policy

    @property
    def refresh_expires_in(self) -> int:
        """Gets the refresh_expires_in of this Token.

        Time in seconds until the refresh token expires.  # noqa: E501

        :return: The refresh_expires_in of this Token.
        :rtype: int
        """
        return self._refresh_expires_in

    @refresh_expires_in.setter
    def refresh_expires_in(self, refresh_expires_in: int):
        """Sets the refresh_expires_in of this Token.

        Time in seconds until the refresh token expires.  # noqa: E501

        :param refresh_expires_in: The refresh_expires_in of this Token.
        :type refresh_expires_in: int
        """

        self._refresh_expires_in = refresh_expires_in

    @property
    def refresh_token(self) -> str:
        """Gets the refresh_token of this Token.

        Refresh token used for jwt token generation.  # noqa: E501

        :return: The refresh_token of this Token.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token: str):
        """Sets the refresh_token of this Token.

        Refresh token used for jwt token generation.  # noqa: E501

        :param refresh_token: The refresh_token of this Token.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def scope(self) -> str:
        """Gets the scope of this Token.

        Scope of the token.  # noqa: E501

        :return: The scope of this Token.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope: str):
        """Sets the scope of this Token.

        Scope of the token.  # noqa: E501

        :param scope: The scope of this Token.
        :type scope: str
        """

        self._scope = scope

    @property
    def session_state(self) -> str:
        """Gets the session_state of this Token.

        Session state.  # noqa: E501

        :return: The session_state of this Token.
        :rtype: str
        """
        return self._session_state

    @session_state.setter
    def session_state(self, session_state: str):
        """Sets the session_state of this Token.

        Session state.  # noqa: E501

        :param session_state: The session_state of this Token.
        :type session_state: str
        """

        self._session_state = session_state

    @property
    def token_type(self) -> str:
        """Gets the token_type of this Token.

        Type of the token.  # noqa: E501

        :return: The token_type of this Token.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type: str):
        """Sets the token_type of this Token.

        Type of the token.  # noqa: E501

        :param token_type: The token_type of this Token.
        :type token_type: str
        """

        self._token_type = token_type
